# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  clean:
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:21.0.2

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # run clean!
      - run:
          name: Cleaning workspace
          command: mvn clean
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  deployment:
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:21.0.2

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # run deployment!
      - run: 
          name: Deploying snapshot
          command: mvn deploy -Dmaven.test.skip -DcreateDocs=true -s settings.xml
  build:
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:21.0.2

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # run tests!      
      - run: 
          name: Running tests
          command: mvn test jacoco:report coveralls:report -DsourceEncoding=UTF-8

      # run code analysis using sonarqube
      - run: 
          name: Running code analysis
          command: mvn -Psonar sonar:sonar -DsourceEncoding=UTF-8

workflows:
  version: 2
  clean_build_deploy:
    jobs:
      - clean
      - build:
          requires:
            - clean
      - deployment:
          requires:
            - build
